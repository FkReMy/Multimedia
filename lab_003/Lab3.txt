/*
    SFML : Simple and Fast Multimedia Library
    SFML/Audio.hpp : Includes the necessary header files for audio-related functionalities like playing music.
    Graphics.hpp   : contains declarations for classes and functions related to 2D graphics
*/
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>

using namespace sf;
int main() {

    /*
        RenderWindow : is a class from SFML that represents a window on the screen where you can draw graphics
                     : its contructor get:
                                            1- VideoMode
                                            2- window title
        VideoMode : VideoMode is a class that defines the resolution of the window.
    */
    RenderWindow window(
        VideoMode(800, 600), 
        "Bouncing Ball"
    );

    /*
        Load a music to play
        Music sound; : Creates an sf::Music object, which handles playing audio files.
        sound.openFromFile("ballbounce2.mp3") : Loads the audio from the file "ballbounce2.mp3". If the file cannot be loaded, the program exits.
        sound.play(); : Starts playing the music.
        sound.setPlayingOffset(seconds(2.f)); : Sets the playback position to 2 seconds into the audio.
        sound.pause(); : Pauses the music.
        sound.play(); : Resumes the music.
        sound.stop(); : Stops the music and rewinds it to the beginning.
    */
    Music music;
    if (!music.openFromFile("ballbounce2.mp3"))
        return -1;

   
    /*
    *   ** Ball setup **
        CircleShape ball(25.f); : CircleShape object named ball is created with a radius of 25 pixels.
        ball.setFillColor(Color::Green); : The ball is filled with the color green using setFillColor.
        ball.setPosition(375.f, 275.f); : The ball is positioned at coordinates (375, 275) using setPosition. This places the ball near the center of the window.
    */
    CircleShape ball(25.f);

    ball.setFillColor(Color::Green);
    ball.setPosition(375.f, 275.f);


    /*
    *   ** Ball velocity **
        A 2D vector velocity is defined to control the speed and direction of the ball.
        The x component (0.1f) controls horizontal movement, and the y component (0.1f) controls vertical movement.
    */
    Vector2f velocity(0.1f, 0.1f);
    

    /*
        This is a function that returns
            true if the window is open
            and
            false if it has been closed.
            This loop forms the main event loop of the application.
    */
    while (window.isOpen()) {

        /*
            Event : is a class that represents an event that has occurred, such as a key press, mouse movement, or window closing.
        */
        Event event;

        /*
            window.pollEvent(event) : This function retrieves the next event from the event queue and stores it in the event variable.
                                        it returns:
                                                    true if an event was retrieved
                                                    and
                                                    false if the event queue is empty.
        */
        while (window.pollEvent(event)) {
            /*
                event.type: This accesses the type of the event.
                Event::Closed: This is a constant that represents the event of the window being closed (Ex., by clicking the close button)
            */
            if (event.type == Event::Closed) {
                window.close();
            }
        }

        /*
            ** Ball movement with bouncing effect **
            ball.move(velocity); : The ball's position is updated by adding the velocity vector to its current position.

            ** Ball collision with window borders **
            * 1. If the ball's x position is less than or equal to 0 (left edge) 
              or greater than or equal to 800 - ball.getRadius() * 2 (right edge), 
              the horizontal velocity is reversed (velocity.x = -velocity.x).

            * 2.If the ball's y position is less than or equal to 0 (top edge) 
             or greater than or equal to 600 - ball.getRadius() * 2 (bottom edge), 
             the vertical velocity is reversed (velocity.y = -velocity.y).
        */
        ball.move(velocity);
        if (ball.getPosition().x <= 0 || ball.getPosition().x >= 800 - ball.getRadius() * 2)
        {
            velocity.x = -velocity.x;
            music.play();
        }
        if (ball.getPosition().y <= 0 || ball.getPosition().y >= 600 - ball.getRadius() * 2)
        {
            velocity.y = -velocity.y;
            music.play();
        }
        
        /*
            This function clears the contents of the window, filling it with a default color (usually black). This is necessary to prepare the window for drawing the next frame.
        */
        window.clear();

        // Draw the ball
        window.draw(ball);

        /*
            window.display(): This function displays the contents of the back buffer on the screen. This makes the changes you've drawn visible.
        */
        window.display();
    }
    return 0;
}